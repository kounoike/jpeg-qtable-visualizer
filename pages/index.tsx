import { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
const jpegDecode = require('../lib/jpeg-decoder')
const jpegEncode = require('../lib/jpeg-encoder')
import { FileUpload, useFileUpload } from 'use-file-upload'
import { useEffect, useRef, useState } from 'react'
import QTable from '../components/qtable'

const Home: NextPage = () => {
  const [cameraJpegFile, selectCameraJpegFile] = useFileUpload()
  const [referenceJpegFile, selectReferenceJpegFile] = useFileUpload()
  const [cameraImgData, setCameraImgData] = useState<{ data: any }>()
  const imageRef1 = useRef<HTMLImageElement | null>(null)
  const imageRef2 = useRef<HTMLImageElement | null>(null)
  const [ydqt, setYdqt] = useState(new Array(64).fill(0))
  const [udqt, setUdqt] = useState(new Array(64).fill(0))
  const [vdqt, setVdqt] = useState(new Array(64).fill(0))
  const readJpegFile = async (file: File) => {
    const buffer = await file.arrayBuffer()
    console.log(buffer)
    const [imgData, jpegObj] = jpegDecode(buffer)
    console.log(imgData, jpegObj)
    setCameraImgData(imgData)
    setYdqt(Array.from(jpegObj.components[0].quantizationTable))
    setUdqt(Array.from(jpegObj.components[1].quantizationTable))
    setVdqt(Array.from(jpegObj.components[2].quantizationTable))
  }
  useEffect(() => {
    if (cameraJpegFile instanceof Array) return
    if (!cameraJpegFile) return
    readJpegFile(cameraJpegFile.file)
  }, [cameraJpegFile])

  useEffect(() => {
    if (!cameraJpegFile) return
    if (!referenceJpegFile) return
    if (referenceJpegFile instanceof Array) return
    if (!imageRef1.current) return
    if (!imageRef2.current) return
    if (!cameraImgData) return
    const img = imageRef1.current
    img.onload = ev => {
      if (!imageRef2.current) return
      if (!cameraImgData) return
      const canvas = new OffscreenCanvas(img.width, img.height)
      const ctx = canvas.getContext('2d')!
      ctx.drawImage(img, 0, 0)
      const imageData = ctx.getImageData(0, 0, img.width, img.height)
      cameraImgData.data = imageData.data
      console.log('cameraImgData', cameraImgData)
      const referenceImageObj = {
        data: imageData.data,
        width: img.width,
        height: img.height,
        exifBuffer: undefined
        // }
      }
      // const ret = jpegEncode(referenceImageObj, ydqt, udqt)
      const ret = jpegEncode(referenceImageObj, 50, ydqt, udqt, vdqt)
      // const ret = jpegEncode(referenceImageObj, 50)
      console.log('JpegEncode', ret)
      imageRef2.current.src = `data:image/jpeg;base64,${ret.base64}`
      imageRef2.current.width = img.width
      imageRef2.current.height = img.height
    }
    img.src = referenceJpegFile.source.toString()
  }, [
    cameraJpegFile,
    referenceJpegFile,
    imageRef1,
    imageRef2,
    cameraImgData,
    ydqt,
    udqt,
    vdqt
  ])
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <button
          onClick={() => {
            selectCameraJpegFile(
              { accept: 'image/jpeg', multiple: false },
              async (file: FileUpload | [FileUpload]) => {}
            )
          }}
        >
          Click to upload Jpeg from Camera
        </button>
        <button
          onClick={() => {
            selectReferenceJpegFile(
              { accept: 'image/*', multiple: false },
              () => {}
            )
          }}
        >
          Click to upload Image(JPEG/PNG) for Reference
        </button>
        <div className={styles.qtableWrapper}>
          <QTable dqt={ydqt} name='Y QTable'></QTable>
          <QTable dqt={udqt} name='Cb QTable'></QTable>
          <QTable dqt={vdqt} name='Cr QTable'></QTable>
        </div>
        <div>
          <img ref={imageRef1}></img>
          <img ref={imageRef2}></img>
        </div>
      </main>

      <footer></footer>
    </div>
  )
}

export default Home
